{
    "problem_ID": "2920",
    "statement": "A Pangram is a sentence containing every letter in the English Alphabet. Write a Python program to check if a an input string is Pangram or not. Ignore the case of the the letters.\nIf the string is a Pangram, the output should be: <b>Yes, the string is a pangram.</b>\nIf the string is not a Pangram, it should report the missing letters, in lowercase, in ORDER.  See the Examples below.\n\nEXAMPLES:\n\nINPUT: The brown fox jump over the lazy dog\nOUTPUT: No, the string is NOT a pangram. Missing letter(s) is(are) c, i, k, q, s.\n\nINPUT: The quick brown fox jumps over the lazy dog\nOUTPUT: Yes, the string is a pangram.\n",
    "IO_example": [
        {
            "IO_number": "20262",
            "input": "The quick brown fox jump over the lazy dog",
            "output": "No, the string is NOT a pangram. Missing letter(s) is(are) s.\n"
        },
        {
            "IO_number": "20263",
            "input": "The quick brown fox jumps over the lazy dog",
            "output": "Yes, the string is a pangram.\n"
        },
        {
            "IO_number": "20264",
            "input": "The brown fox jump over the lazy dog",
            "output": "No, the string is NOT a pangram. Missing letter(s) is(are) c, i, k, q, s.\n"
        },
        {
            "IO_number": "20265",
            "input": "Hi, I am Amey\n",
            "output": "No, the string is NOT a pangram. Missing letter(s) is(are) b, c, d, f, g, j, k, l, n, o, p, q, r, s, t, u, v, w, x, z.\n"
        },
        {
            "IO_number": "20266",
            "input": "Did The quick brown fox jump over the lazy dog, hmm ..., I don't know.",
            "output": "No, the string is NOT a pangram. Missing letter(s) is(are) s.\n"
        },
        {
            "IO_number": "20267",
            "input": "This problem has no automated test cases. Add automated/pre-generated test cases to this problem.\n",
            "output": "No, the string is NOT a pangram. Missing letter(s) is(are) f, j, k, q, v, w, x, y, z.\n"
        },
        {
            "IO_number": "20268",
            "input": "",
            "output": "\nOUCH!! your program generated an Exception on line 10 :\nEOF when reading a line\n"
        },
        {
            "IO_number": "20269",
            "input": "...",
            "output": "No, the string is NOT a pangram. Missing letter(s) is(are) a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z.\n"
        },
        {
            "IO_number": "20270",
            "input": "No, the string is NOT a pangram. Missing letter(s) is(are) a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z.\ninvisible\t",
            "output": "Yes, the string is a pangram.\n"
        },
        {
            "IO_number": "20271",
            "input": "Yes, the string is a pangram.",
            "output": "No, the string is NOT a pangram. Missing letter(s) is(are) b, c, d, f, j, k, l, o, q, u, v, w, x, z.\n"
        }
    ],
    "truncated_solutions": [
        "import string\n",
        "import string\n\nalphabet = set(string.ascii_lowercase) \n  \ndef ispangram(s): \n    schar = set(s.lower())\n    return (schar >= alphabet, sorted(list(alphabet - schar)))\n      \n# Driver code \ns = input()\nflag, missing = ispangram(s)",
        "import string\n\nalphabet = set(string.ascii_lowercase) \n  \ndef ispangram(s): \n    schar = set(s.lower())\n    return (schar >= alphabet, sorted(list(alphabet - schar)))\n      \n# Driver code \ns = input()\nflag, missing = ispangram(s)\nif flag:\n    print(\"Yes, the string is a pangram.\") \nelse: \n    misstr = \", \".join(missing)"
    ],
    "reference_solution": "import string\n\nalphabet = set(string.ascii_lowercase) \n  \ndef ispangram(s): \n    schar = set(s.lower())\n    return (schar >= alphabet, sorted(list(alphabet - schar)))\n      \n# Driver code \ns = input()\nflag, missing = ispangram(s)\nif flag:\n    print(\"Yes, the string is a pangram.\") \nelse: \n    misstr = \", \".join(missing)\n    print(\"No, the string is NOT a pangram. Missing letter(s) is(are) {}.\".format(misstr)) \n    \n"
}